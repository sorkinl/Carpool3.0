{"version":3,"file":"index.esm.js","sources":["../src/index.tsx"],"sourcesContent":["/**\n * Copyright 2021 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, ReactNode, useState, ReactElement } from \"react\";\nimport { Loader, LoaderOptions } from \"@googlemaps/js-api-loader\";\n\nexport enum Status {\n  LOADING = \"LOADING\",\n  FAILURE = \"FAILURE\",\n  SUCCESS = \"SUCCESS\",\n}\n\nexport interface WrapperProps extends LoaderOptions {\n  /**\n   * Children wrapped by the `<Wrapper>{elements}</Wrapper`.\n   */\n  children?: ReactNode;\n  /**\n   * Render prop used to switch on the status.\n   */\n  render?: (status: Status) => ReactElement;\n  /**\n   * Callback prop used to access `@googlemaps/js-api-loader` and `Status`.\n   *\n   * Note: The callback be executed multiple times in the lifecycle of the component.\n   */\n  callback?: (status: Status, loader: Loader) => void;\n}\n\n/**\n * A component to wrap the loading of the Google Maps JavaScript API.\n *\n * ```\n * import { Wrapper } from '@googlemaps/react-wrapper';\n *\n * const MyApp = () => (\n * \t<Wrapper apiKey={'YOUR_API_KEY'}>\n * \t\t<MyMapComponent />\n * \t</Wrapper>\n * );\n * ```\n *\n * @param props\n */\nexport const Wrapper = ({\n  children,\n  render,\n  callback,\n  ...options\n}: WrapperProps): ReactElement => {\n  const [status, setStatus] = useState(Status.LOADING);\n\n  useEffect(() => {\n    const loader = new Loader(options);\n\n    const setStatusAndExecuteCallback = (status: Status) => {\n      if (callback) callback(status, loader);\n      setStatus(status);\n    };\n\n    setStatusAndExecuteCallback(Status.LOADING);\n\n    loader.load().then(\n      () => setStatusAndExecuteCallback(Status.SUCCESS),\n      () => setStatusAndExecuteCallback(Status.FAILURE)\n    );\n\n  }, []);\n\n  if (status === Status.SUCCESS && children) return <>{children}</>;\n\n  if (render) return render(status);\n\n  return <></>;\n};\n"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;IAmBY;AAAZ,WAAY,MAAM;IAChB,6BAAmB,CAAA;IACnB,6BAAmB,CAAA;IACnB,6BAAmB,CAAA;AACrB,CAAC,EAJW,MAAM,KAAN,MAAM,QAIjB;AAmBD;;;;;;;;;;;;;;;MAea,OAAO,GAAG,CAAC,EACtB,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,GAAG,OAAO,EACG;IACb,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAErD,SAAS,CAAC;QACR,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;QAEnC,MAAM,2BAA2B,GAAG,CAAC,MAAc;YACjD,IAAI,QAAQ;gBAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACvC,SAAS,CAAC,MAAM,CAAC,CAAC;SACnB,CAAC;QAEF,2BAA2B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAE5C,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAChB,MAAM,2BAA2B,CAAC,MAAM,CAAC,OAAO,CAAC,EACjD,MAAM,2BAA2B,CAAC,MAAM,CAAC,OAAO,CAAC,CAClD,CAAC;KAEH,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,MAAM,KAAK,MAAM,CAAC,OAAO,IAAI,QAAQ;QAAE,OAAO,0CAAG,QAAQ,CAAI,CAAC;IAElE,IAAI,MAAM;QAAE,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;IAElC,OAAO,yCAAK,CAAC;AACf;;;;"}